First, read database connection parameters from the database.ini file.
Next, create a new database connection by calling the connect() function.
Then, create a new cursor and execute an SQL statement to get the PostgreSQL database version.
After that, read the result set by calling the  fetchone() method of the cursor object.
Finally, close the communication with the database server by calling the close() method of the cursor and connection objects.The connect() function raises the DatabaseError exception if an error occurred. 

def config(filename='database.ini', section='postgresql'):
	# create a parser
	parser = ConfigParser()
	# read config file
	parser.read(filename)
 
	# get section, default to postgresql
	db = {}
	if parser.has_section(section):
		params = parser.items(section)
		for param in params:
			db[param[0]] = param[1]
	else:
		raise Exception('Section {0} not found in the {1} file'.format(section, filename))
	return db
 
def connect():
	""" Connect to the PostgreSQL database server """
	conn = None
	try:
		# read connection parameters
		params = config()
		print (params)
		# connect to the PostgreSQL server
		print('Connecting to the PostgreSQL database...')
		conn = psycopg2.connect(**params)
		conn.autocommit = True
		# create a cursor
		cur = conn.cursor()       
		# execute a statement
		print('PostgreSQL database version:')
		cur.execute('SELECT version()')

		# display the PostgreSQL database server version
		db_version = cur.fetchone()
		print(db_version)
		# close the communication with the PostgreSQL
		#cur.close()
	except (Exception, psycopg2.DatabaseError) as error:
		print(error)
	# finally:
	# 	if conn is not None:
	# 		conn.close()
	# 		print('Database connection closed.')
	return conn


# except TypeError as err:
		# 	print("NoneType: {0}".format(err) + "Validation is failed")				
		# except Exception as err:
		# 	print(err)
		# 	print_tb(traceback.print_tb(err.__traceback__))


